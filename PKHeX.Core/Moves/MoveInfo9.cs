using System;

namespace PKHeX.Core;

/// <summary>
/// Details about moves in <see cref="EntityContext.Gen9"/>
/// </summary>
internal static class MoveInfo9
{
    public static ReadOnlySpan<byte> MovePP_SV =>
    [
        0, 35, 25, 10, 15, 10, 20, 15, 15, 15, 35, 30, 10, 15, 20, 30, 35, 35, 20, 15, 15, 20, 25, 20, 30, 5, 10, 10, 15, 15, 25, 20, 10, 35, 15, 20, 10, 10, 15, 30, 35, 10, 20, 30, 25, 40, 20, 15, 20, 20, 20, 30, 25, 15, 30, 25, 10, 10, 10, 10, 10, 20, 10, 10, 35, 20, 10, 20, 20, 20, 5, 25, 15, 10, 20, 25, 10, 35, 30, 15, 10, 40, 10, 15, 30, 15, 20, 10, 15, 10, 10, 15, 10, 25, 10, 20, 10, 30, 30, 20, 20, 15, 10, 40, 10, 10, 30, 10, 20, 10, 20, 40, 20, 30, 30, 20, 30, 10, 10, 20, 5, 10, 30, 20, 20, 20, 10, 15, 15, 20, 10, 15, 35, 20, 10, 10, 10, 30, 15, 40, 20, 10, 10, 5, 10, 30, 10, 15, 10, 15, 40, 10, 10, 5, 15, 10, 10, 10, 10, 10, 30, 10, 10, 20, 10, 1, 1, 10, 25, 10, 5, 20, 20, 15, 10, 15, 30, 10, 40, 15, 10, 25, 10, 30, 10, 20, 10, 10, 10, 10, 10, 20, 10, 40, 5, 5, 15, 5, 10, 5, 10, 10, 10, 10, 20, 20, 40, 15, 10, 20, 20, 15, 5, 15, 10, 5, 20, 15, 20, 25, 20, 10, 30, 10, 10, 20, 40, 5, 20, 20, 20, 10, 35, 10, 5, 5, 5, 15, 10, 20, 5, 5, 15, 20, 10, 5, 10, 15, 10, 15, 15, 10, 10, 10, 20, 10, 10, 10, 10, 15, 15, 15, 10, 20, 20, 10, 20, 20, 20, 20, 20, 10, 10, 10, 20, 20, 10, 15, 10, 10, 15, 10, 20, 5, 5, 10, 10, 20, 5, 10, 20, 15, 20, 20, 20, 10, 10, 15, 20, 10, 20, 20, 15, 10, 10, 25, 10, 10, 10, 10, 15, 15, 5, 20, 15, 15, 40, 15, 10, 10, 10, 20, 20, 5, 10, 10, 20, 5, 10, 10, 10, 30, 20, 30, 15, 5, 40, 15, 10, 20, 15, 15, 15, 25, 15, 20, 20, 20, 15, 20, 10, 20, 20, 5, 10, 10, 5, 40, 10, 10, 5, 10, 10, 15, 10, 20, 15, 30, 10, 20, 5, 10, 10, 15, 10, 10, 5, 15, 10, 10, 10, 30, 20, 20, 10, 10, 10, 5, 10, 5, 20, 10, 20, 10, 15, 10, 20, 20, 20, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 30, 10, 10, 15, 10, 10, 10, 20, 30, 10, 30, 15, 15, 15, 15, 30, 10, 20, 15, 10, 10, 15, 15, 5, 15, 15, 15, 15, 10, 10, 15, 15, 15, 15, 10, 20, 20, 20, 20, 10, 20, 10, 15, 20, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 10, 10, 10, 15, 10, 10, 10, 20, 15, 10, 15, 10, 15, 10, 10, 10, 10, 10, 20, 20, 20, 20, 10, 15, 15, 15, 15, 15, 15, 20, 15, 10, 15, 15, 15, 15, 10, 15, 10, 10, 10, 15, 15, 15, 15, 5, 5, 15, 5, 10, 10, 10, 20, 20, 10, 10, 10, 30, 15, 15, 10, 15, 25, 10, 15, 15, 10, 20, 20, 10, 15, 10, 10, 10, 15, 15, 15, 10, 10, 20, 10, 10, 10, 10, 10, 10, 15, 10, 5, 10, 10, 15, 10, 10, 10, 20, 15, 10, 20, 5, 20, 15, 20, 10, 20, 15, 20, 20, 10, 10, 10, 10, 10, 20, 10, 30, 15, 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 10, 20, 20, 10, 20, 10, 20, 30, 10, 10, 5, 10, 20, 20, 40, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 15, 10, 30, 20, 15, 10, 10, 10, 15, 15, 10, 5, 10, 5, 20, 15, 10, 15, 15, 10, 5, 15, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 10, 10, 10, 10, 15, 10, 10, 10, 10, 10, 10, 10, 5, 10, 1, 10, 10, 10, 1, 1, 1, 1, 1, 1, 10, 15, 10, 10, 10, 10, 0
    ];

    public static ReadOnlySpan<byte> MoveType_SV =>
    [
        0, 0, 1, 0, 17, 1, 0, 9, 14, 12, 0, 0, 1, 2, 0, 11, 2, 2, 0, 2, 16, 8, 11, 0, 1, 1, 1, 1, 4, 0, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 3, 6, 6, 0, 16, 0, 0, 0, 0, 0, 0, 3, 9, 9, 14, 10, 10, 10, 14, 14, 13, 10, 14, 0, 2, 2, 1, 1, 1, 1, 5, 11, 11, 11, 0, 11, 11, 3, 11, 11, 11, 6, 15, 9, 12, 12, 12, 12, 5, 4, 4, 4, 3, 13, 13, 13, 13, 13, 0, 0, 13, 7, 0, 0, 0, 0, 0, 0, 0, 7, 10, 0, 13, 13, 14, 13, 0, 0, 0, 2, 0, 0, 7, 3, 3, 4, 9, 10, 10, 0, 1, 3, 0, 13, 13, 0, 1, 0, 13, 3, 9, 6, 0, 2, 0, 10, 0, 11, 8, 13, 0, 3, 10, 0, 0, 4, 13, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16, 6, 0, 7, 9, 0, 7, 0, 0, 2, 11, 1, 7, 14, 0, 1, 13, 16, 17, 0, 3, 4, 10, 4, 12, 0, 7, 0, 14, 1, 4, 0, 15, 5, 11, 0, 17, 5, 0, 0, 0, 12, 6, 8, 0, 0, 0, 0, 0, 14, 0, 0, 0, 9, 4, 1, 6, 15, 0, 0, 16, 0, 0, 8, 8, 1, 0, 11, 17, 0, 1, 15, 10, 9, 16, 13, 0, 0, 5, 7, 13, 1, 10, 16, 0, 0, 0, 0, 0, 9, 14, 16, 16, 9, 16, 0, 1, 1, 0, 0, 12, 16, 0, 13, 13, 0, 0, 11, 1, 13, 0, 1, 1, 0, 16, 0, 9, 13, 13, 0, 7, 16, 0, 10, 1, 0, 6, 8, 3, 2, 0, 9, 4, 14, 11, 0, 0, 3, 0, 9, 10, 8, 7, 0, 11, 16, 2, 9, 0, 5, 6, 8, 11, 0, 13, 10, 6, 7, 13, 1, 4, 14, 10, 11, 2, 14, 8, 0, 0, 15, 11, 1, 1, 4, 3, 0, 12, 11, 10, 13, 11, 15, 5, 12, 10, 8, 13, 2, 13, 13, 1, 1, 8, 13, 10, 0, 0, 2, 2, 0, 8, 6, 1, 16, 16, 16, 16, 13, 0, 13, 0, 13, 3, 0, 0, 0, 13, 13, 16, 0, 11, 16, 3, 10, 10, 12, 9, 1, 1, 5, 3, 16, 16, 10, 11, 2, 6, 6, 15, 15, 5, 1, 1, 1, 11, 2, 4, 16, 0, 16, 8, 14, 14, 7, 12, 14, 9, 7, 4, 13, 13, 8, 8, 5, 2, 13, 15, 12, 9, 11, 11, 5, 3, 3, 8, 8, 5, 0, 5, 11, 2, 0, 6, 12, 11, 10, 6, 6, 6, 5, 0, 15, 15, 16, 0, 9, 16, 11, 7, 7, 16, 5, 13, 13, 17, 13, 3, 8, 6, 13, 13, 5, 1, 9, 3, 6, 8, 13, 12, 10, 9, 3, 1, 3, 16, 0, 0, 0, 0, 0, 0, 3, 13, 1, 13, 10, 0, 13, 7, 2, 8, 1, 9, 16, 2, 0, 0, 1, 13, 9, 10, 9, 11, 12, 6, 4, 14, 15, 0, 12, 12, 4, 15, 13, 11, 1, 10, 9, 11, 6, 11, 16, 13, 0, 2, 0, 8, 16, 6, 0, 1, 14, 12, 9, 9, 14, 14, 16, 14, 9, 9, 12, 2, 1, 3, 4, 6, 6, 7, 7, 0, 12, 12, 11, 11, 14, 17, 16, 16, 17, 17, 17, 11, 17, 12, 17, 17, 17, 0, 1, 8, 17, 0, 5, 10, 7, 10, 9, 11, 17, 12, 3, 6, 17, 12, 0, 12, 17, 12, 0, 17, 12, 5, 6, 1, 16, 4, 4, 4, 17, 10, 4, 2, 16, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 12, 4, 6, 3, 7, 16, 10, 14, 17, 4, 11, 11, 11, 0, 3, 0, 8, 16, 6, 8, 13, 6, 9, 16, 9, 13, 8, 3, 0, 15, 11, 13, 2, 15, 15, 16, 14, 7, 16, 10, 17, 7, 12, 0, 0, 13, 9, 17, 13, 4, 7, 5, 10, 13, 7, 8, 7, 0, 12, 17, 0, 12, 9, 12, 17, 17, 8, 7, 17, 5, 15, 1, 11, 14, 2, 1, 2, 0
    ];

    /// <summary>
    /// Bitflag indexes of moves that are not usable in game.
    /// </summary>
    /// <remarks>
    /// This is a bitflag array, where each bit represents a move. If the bit is set, the move is not usable in game.
    /// Instead of allocating a hashset, this is a more efficient method (no allocation) with O(1) lookup (faster than HashSet's O(1) lookup).
    /// </remarks>
    public static ReadOnlySpan<byte> DummiedMoves => // 251 moves (502 bytes) => 100 bytes
    [
        0x1C, 0x20, 0x00, 0x0C, 0x00, 0x02, 0x02, 0x00, 0x04, 0x00,
        0x04, 0x00, 0x09, 0x00, 0xA1, 0x22, 0x5D, 0x50, 0x36, 0xC8,
        0x00, 0x0E, 0x00, 0x42, 0x02, 0x00, 0x00, 0x45, 0x10, 0x22,
        0x00, 0x00, 0x04, 0x0A, 0xA4, 0x80, 0x27, 0x70, 0x00, 0x51,
        0x91, 0x00, 0x00, 0x04, 0x60, 0x08, 0xA0, 0x67, 0x04, 0x00,
        0x00, 0x00, 0x00, 0xA4, 0x00, 0x28, 0x01, 0x01, 0x04, 0x28,
        0x23, 0x00, 0x04, 0x08, 0x10, 0x00, 0x0C, 0x83, 0x07, 0x00,
        0x8A, 0x02, 0x4C, 0x10, 0x80, 0x03, 0xF0, 0xC3, 0xFF, 0xFF,
        0xFF, 0xFF, 0x07, 0x80, 0x26, 0xA0, 0x80, 0xFF, 0x11, 0xE1,
        0xFB, 0xFF, 0xFF, 0x00, 0xEE, 0xFF, 0x7F, 0x08, 0x00, 0x0D,
    ];
}
